name: Chef CI

on:
  push:
    branches: [ main ]
    paths:
      - 'chef/**'
      - '.github/workflows/chef-ci.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'chef/**'
      - '.github/workflows/chef-ci.yml'
  workflow_dispatch:

defaults:
  run:
    working-directory: chef

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        ubuntu-version: ['24.04']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.1'

    - name: Install Chef tools for validation
      run: |
        gem install chef -v 18.8.9
        gem install cookstyle
        gem install foodcritic || true

    - name: Display versions
      run: |
        echo "Ruby version:"
        ruby --version
        echo "Chef version:"
        chef-client --version || echo "Chef not installed"
        echo "Docker version:"
        docker --version

    - name: Make scripts executable
      run: |
        chmod +x build.sh
        chmod +x test-deployment.sh

    - name: Build Chef package
      run: |
        echo "Building Chef package..."
        ./build.sh

    - name: Verify build outputs
      run: |
        echo "Checking build outputs..."
        ls -la output/
        if [ ! -f "output/chef-runtime.tar.gz" ]; then
          echo "Error: chef-runtime.tar.gz not found!"
          exit 1
        fi
        if [ ! -f "output/install.sh" ]; then
          echo "Error: install.sh not found!"
          exit 1
        fi
        if [ ! -f "output/post-install.sh" ]; then
          echo "Error: post-install.sh not found!"
          exit 1
        fi
        if [ ! -f "output/uninstall.sh" ]; then
          echo "Error: uninstall.sh not found!"
          exit 1
        fi
        echo "All build outputs verified successfully"

    - name: Run deployment test with Ubuntu ${{ matrix.ubuntu-version }}
      run: |
        echo "Running deployment test with Ubuntu ${{ matrix.ubuntu-version }}..."
        # Update test script to use the matrix Ubuntu version
        sed -i "s/IMAGE=\"ubuntu:.*\"/IMAGE=\"ubuntu:${{ matrix.ubuntu-version }}\"/" test-deployment.sh
        ./test-deployment.sh

    - name: Upload build artifacts
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: chef-runtime-ubuntu-${{ matrix.ubuntu-version }}
        path: |
          chef/output/chef-runtime.tar.gz
          chef/output/install.sh
          chef/output/post-install.sh
          chef/output/uninstall.sh

    - name: Upload test logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-logs-ubuntu-${{ matrix.ubuntu-version }}
        path: /tmp/chef-test-*.log
        if-no-files-found: ignore

    - name: Clean up Docker containers
      if: always()
      run: |
        echo "Cleaning up Docker containers..."
        docker ps -aq --filter "name=chef-" | xargs -r docker rm -f || true

  validate-cookbooks:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.1'

    - name: Install Chef tools
      run: |
        gem install chef -v 18.8.9
        gem install cookstyle
        gem install foodcritic || true

    - name: Validate cookbook syntax
      run: |
        echo "Validating Chef cookbook syntax..."
        cd cookbooks/apache
        chef exec ruby -c recipes/default.rb || ruby -c recipes/default.rb

    - name: Validate cookbook metadata
      run: |
        echo "Validating cookbook metadata..."
        cd cookbooks/apache
        ruby -rjson -e "JSON.parse(File.read('metadata.rb').gsub(/^(name|maintainer|maintainer_email|license|description|long_description|version|chef_version|issues_url|source_url|supports|depends|attribute).*$/, '\"valid\": \"true\"').gsub(/\n/, ''))" 2>/dev/null || echo "Metadata is valid Ruby DSL"

    - name: Run Cookstyle (Chef linting)
      run: |
        echo "Running Cookstyle on cookbooks..."
        cookstyle cookbooks/ || true

    - name: Run Foodcritic (cookbook linting)
      run: |
        echo "Running Foodcritic on cookbooks..."
        foodcritic cookbooks/ -f any -t ~FC121 || true

    - name: Check cookbook structure
      run: |
        echo "Checking cookbook structure..."
        for cookbook in cookbooks/*; do
          if [ -d "$cookbook" ]; then
            cookbook_name=$(basename "$cookbook")
            echo "Checking $cookbook_name..."
            
            # Check required files/directories
            if [ ! -f "$cookbook/metadata.rb" ]; then
              echo "Warning: $cookbook_name missing metadata.rb"
            fi
            
            if [ ! -d "$cookbook/recipes" ]; then
              echo "Warning: $cookbook_name missing recipes directory"
            fi
            
            if [ -d "$cookbook/recipes" ] && [ ! -f "$cookbook/recipes/default.rb" ]; then
              echo "Warning: $cookbook_name missing default recipe"
            fi
            
            echo "$cookbook_name structure check complete"
          fi
        done
